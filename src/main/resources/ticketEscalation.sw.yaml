specVersion: "0.8"
id: ticket-escalation
name: Ticket escalation
annotations:
  - "workflow-type/infrastructure"
version: 0.0.1
timeouts:
  workflowExecTimeout: PT24H
start: CreateJiraIssue
dataInputSchema: ocp-onboarding-schema.json
functions:
  - name: sendEmail
    operation: 'specs/mailtrap.yaml#sendEmail'
  - name: getJiraIssue
    operation: specs/jira.yaml#getIssue
  - name: createJiraIssue
    operation: specs/jira.yaml#createIssue
  - name: createK8sNamespace
    operation: specs/kube.yaml#createCoreV1Namespace
  - name: logInfo
    type: custom
    operation: "sysout:INFO"

states:
  - name: CreateJiraIssue
    type: operation
    actions:
      - functionRef:
          refName: createJiraIssue
          arguments:
            update: {}
            fields:
              summary: '"Request For New Namespace: " + .namespace'
              issuetype:
                id: "10001"
              project:
                key: "TEST"
        actionDataFilter:
          toStateData: .jiraIssue
    transition: InitJiraBrowser
  - name: InitJiraBrowser
    type: operation
    actions: []
    transition: InitTimer
    stateDataFilter:
      output: ". += { jiraBrowser: ((.jiraIssue.self  | sub(\"rest/.*\"; \"browse/\")) + .jiraIssue.key) }"
  - name: InitTimer
    type: operation
    actions: []
    stateDataFilter:
      output: ". += { timer: { triggered: false, startTime: now(), elapsedSeconds: 0 }}"
    transition: GetJiraIssue
  - name: GetJiraIssue
    type: operation
    actions:
      - functionRef:
          refName: getJiraIssue
          arguments:
            issueIdOrKey: .jiraIssue.key
            fields: status
        actionDataFilter:
          toStateData: .jiraIssue
        sleep:
          before: PT6S
    transition: GetJiraIssueResult
  - name: GetJiraIssueResult
    type: operation
    actions:
      - name: "printAction"
        functionRef:
          refName: "logInfo"
          arguments:
            message: "\"GetJiraIssueResult is \\(.)\""
    transition: TicketDone
    stateDataFilter:
      output: ". += { timer: { triggered: .timer.triggered, startTime: .timer.startTime, elapsedSeconds: now() - .timer.startTime }}"
  - name: TicketDone
    type: switch
    dataConditions:
      - condition: (.jiraIssue.fields.status.statusCategory.key == "done")
        transition:
          nextState: CreateK8sNamespace
      - condition: (.jiraIssue.fields.status.statusCategory.key != "done" and .timer.triggered == false and .timer.elapsedSeconds > 60)
        transition:
          nextState: Escalate
    defaultCondition:
      transition: GetJiraIssue
  - name: Escalate
    type: operation
    actions:
      - name: "printAction"
        functionRef:
          refName: "logInfo"
          arguments:
            message: "\"Escalate is \\(.)\""
      - name: "sendEmail"
        functionRef:
          refName: sendEmail
          arguments:
            inbox_id: 2403453
            to: 
              - email: .manager
                name: "Escalation Manager"
            from:
              email: escalation@gmail.com
              name: "Escalation service"
            subject: " \"Escalation ticket \" + .jiraIssue.key "
            html: '"Please manage escalation ticket <a href=\"" + .jiraBrowser + "\">" + .jiraIssue.key + "</a>"'
    transition: GetJiraIssue
    stateDataFilter:
      output: ". += { timer: { triggered: true, startTime: .timer.startTime, elapsedSeconds: 0 }}"
  - name: CreateK8sNamespace
    type: operation
    actions:
      - functionRef:
          refName: createK8sNamespace
          arguments:
            apiVersion: v1
            kind: Namespace
            metadata:
              name: ".namespace"
        actionDataFilter:
          toStateData: .createdNamespace
    stateDataFilter:
      output: "{createdNamespace: .createdNamespace}"
    end: true
